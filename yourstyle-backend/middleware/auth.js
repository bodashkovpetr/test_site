// middleware/auth.js
// ????????????? ?????????????? ?? JWT + ??????????????? adminOnly
const { verifyToken } = require('../utils/jwt');

// ???????? middleware ??????????????
function authMiddleware(req, res, next) {
  try {
    const authHeader = req.headers.authorization || req.headers.Authorization;
    if (!authHeader || !/^Bearer\s+.+/i.test(authHeader)) {
      return res.status(401).json({ success: false, error: 'No token provided' });
    }

    const token = authHeader.replace(/^Bearer\s+/i, '').trim();
    const decoded = verifyToken(token); // ????? ?????? ??????

    if (!decoded) {
      return res.status(401).json({ success: false, error: 'Invalid or expired token' });
    }

    // ???????????? payload ???? { id } ? { userId }
    req.user = {
      id: decoded.id ?? decoded.userId,
      userId: decoded.userId ?? decoded.id,
      email: decoded.email,
      role: decoded.role, // ???? ???? ? ??????
      raw: decoded
    };

    if (!req.user.id) {
      return res.status(401).json({ success: false, error: 'Invalid token payload' });
    }

    return next();
  } catch (error) {
    return res.status(401).json({ success: false, error: 'Authentication failed' });
  }
}

// ?????? ?????? ??? ??????? (??? ???? ??????? dev-????)
function adminOnly(req, res, next) {
  // ????????? ???? ???? admin, ???? ???? ???????? ????? .env
  if (req.user?.role === 'admin' || process.env.ALLOW_USERS_LIST === 'true') {
    return next();
  }
  return res.status(403).json({ success: false, error: 'Forbidden' });
}

// ??????? ??-????????? — ??? middleware, ???? ???????????
module.exports = authMiddleware;
module.exports.authMiddleware = authMiddleware;
module.exports.adminOnly = adminOnly;